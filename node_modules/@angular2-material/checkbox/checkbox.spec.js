"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var testing_1 = require('angular2/testing');
var core_1 = require('angular2/core');
var browser_1 = require('angular2/platform/browser');
var checkbox_1 = require('./checkbox');
// IE11 does not support event constructors, so we need to perform this check.
var BROWSER_SUPPORTS_EVENT_CONSTRUCTORS = (function () {
    // See: https://github.com/rauschma/event_constructors_check/blob/gh-pages/index.html#L39
    try {
        return new Event('submit', { bubbles: false }).bubbles === false &&
            new Event('submit', { bubbles: true }).bubbles === true;
    }
    catch (e) {
        return false;
    }
})();
function main() {
    testing_1.describe('MdCheckbox', function () {
        var builder;
        testing_1.beforeEach(testing_1.inject([testing_1.TestComponentBuilder], function (tcb) {
            builder = tcb;
        }));
        testing_1.it('attaches a class "md-checkbox" to the host element', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el).not.toBeNull();
            }).then(done).catch(done);
        });
        testing_1.it('attaches a unique id to the host element', function (done) {
            builder.createAsync(CheckboxMultiController).then(function (fixture) {
                fixture.detectChanges();
                var first = fixture.debugElement.query(browser_1.By.css('.md-checkbox:first-of-type'));
                var second = fixture.debugElement.query(browser_1.By.css('.md-checkbox:nth-of-type(2)'));
                testing_1.expect(first.nativeElement.id).toMatch(/^md\-checkbox\-\d$/g);
                testing_1.expect(second.nativeElement.id).toMatch(/^md\-checkbox\-\d$/g);
                testing_1.expect(first.nativeElement.id).not.toEqual(second.nativeElement.id);
            }).then(done).catch(done);
        });
        testing_1.it('allows clients to provide their own id', function (done) {
            builder.createAsync(CheckboxCustomIdController).then(function (fixture) {
                fixture.detectChanges();
                var component = fixture.componentInstance;
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.id).toEqual(component.checkboxId);
            }).then(done).catch(done);
        });
        testing_1.it('creates a label with an id based off the checkbox id', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                var label = el.nativeElement.querySelector('label');
                testing_1.expect(label.id).toEqual(el.nativeElement.id + "-label");
            }).then(done).catch(done);
        });
        testing_1.it('uses <ng-content></ng-content> for the label markup', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                var label = el.nativeElement.querySelector('label');
                testing_1.expect(label.innerHTML.trim()).toEqual('<em>my</em> checkbox');
            }).then(done).catch(done);
        });
        testing_1.it('adds a checkbox role attribute to the host element', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.getAttribute('role')).toEqual('checkbox');
            }).then(done).catch(done);
        });
        testing_1.it('defaults "aria-checked" to "false" on the host element', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.getAttribute('aria-checked')).toEqual('false');
            }).then(done).catch(done);
        });
        testing_1.it('defaults "aria-disabled" to "false" on the host element', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.getAttribute('aria-disabled')).toEqual('false');
            }).then(done).catch(done);
        });
        testing_1.it('defaults tabindex to 0 to the host element', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.tabIndex).toEqual(0);
            }).then(done).catch(done);
        });
        testing_1.it('allows clients to provide their own tabindex', function (done) {
            builder.createAsync(CheckboxCustomTabindexController).then(function (fixture) {
                fixture.detectChanges();
                var component = fixture.componentInstance;
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.tabIndex).toEqual(component.checkboxTabindex);
            }).then(done).catch(done);
        });
        testing_1.it('allows clients to provide an aria-label', function (done) {
            builder.createAsync(CheckboxCustomArialabelController).then(function (fixture) {
                fixture.detectChanges();
                var component = fixture.componentInstance;
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.getAttribute('aria-label')).toEqual(component.checkboxLabel);
            }).then(done).catch(done);
        });
        testing_1.it('sets the "aria-labelledby" attribute to the id of the label', function (done) {
            builder.createAsync(CheckboxController).then(function (fixture) {
                fixture.detectChanges();
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                var label = el.nativeElement.querySelector('label');
                testing_1.expect(el.nativeElement.getAttribute('aria-labelledby')).toEqual(label.id);
            }).then(done).catch(done);
        });
        testing_1.describe('when given an "align" input with a value of "end"', function () {
            var fixture;
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxEndAlignedController).then(function (f) {
                    fixture = f;
                    fixture.detectChanges();
                }).then(done).catch(done);
            });
            testing_1.it('sets an "md-checkbox-align-end" class on the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-align-end');
            });
        });
        testing_1.describe("when the checkbox's checked value is set", function () {
            var fixture;
            var controller;
            var changePromise;
            var waitingForChange;
            function waitForChange() {
                if (waitingForChange) {
                    throw new Error('You are already waiting for a change!');
                }
                waitingForChange = true;
                return new Promise(function (resolve, reject) {
                    controller.eventProxy.subscribe(resolve, reject);
                }).then(function (val) {
                    waitingForChange = false;
                    return val;
                });
            }
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    changePromise = waitForChange();
                    controller.isChecked = true;
                    fixture.detectChanges();
                }).then(done).catch(done);
            });
            testing_1.it('adds a "md-checkbox-checked" modifier class to the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-checked');
            });
            testing_1.it('sets "aria-checked" to be "true" on the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('md-checkbox'));
                controller.isIndeterminate = false;
                controller.isChecked = true;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.getAttribute('aria-checked')).toEqual('true');
            });
            testing_1.it('emits a change event with the currently checked value', function (done) {
                changePromise.then(function (isChecked) {
                    testing_1.expect(isChecked).toBe(true);
                    var nextChangePromise = waitForChange();
                    controller.isChecked = false;
                    fixture.detectChanges();
                    return nextChangePromise;
                }).then(function (isChecked) {
                    testing_1.expect(isChecked).toBe(false);
                }).then(done).catch(done);
            });
        });
        testing_1.describe('when the checkbox is indeterminate', function () {
            var fixture;
            var controller;
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    controller.isIndeterminate = true;
                    fixture.detectChanges();
                }).then(done).catch(done);
            });
            testing_1.it('adds a "md-checkbox-indeterminate" class to the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-indeterminate');
            });
            testing_1.it('sets "aria-checked" to "mixed" on the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.getAttribute('aria-checked')).toEqual('mixed');
            });
            testing_1.describe('when re-checked to true', function () {
                testing_1.beforeEach(function () {
                    controller.isChecked = true;
                    fixture.detectChanges();
                });
                testing_1.it('removes md-checkbox-indeterminate', function () {
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-indeterminate');
                });
            });
            testing_1.describe('when re-checked to false', function () {
                testing_1.beforeEach(function () {
                    controller.isChecked = true;
                    fixture.detectChanges();
                    controller.isIndeterminate = true;
                    fixture.detectChanges();
                    controller.isChecked = false;
                    fixture.detectChanges();
                });
                testing_1.it('removes md-checkbox-indeterminate', function () {
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-indeterminate');
                });
            });
        });
        testing_1.describe('when the checkbox is disabled', function () {
            var fixture;
            var controller;
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    fixture.detectChanges();
                    controller.isDisabled = true;
                    fixture.detectChanges();
                }).then(done).catch(done);
            });
            testing_1.it('adds a "md-checkbox-disabled" class to the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-disabled');
            });
            testing_1.it('removes the tabindex attribute from the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.hasAttribute('tabindex')).toBe(false);
            });
            testing_1.it('sets "aria-disabled" to "true" on the host element', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.getAttribute('aria-disabled')).toEqual('true');
            });
            testing_1.it('restores the previously set tabindex when re-enabled', function (done) {
                builder.createAsync(CheckboxCustomTabindexController).then(function (f) {
                    fixture = f;
                    var tabindexController = fixture.componentInstance;
                    tabindexController.isDisabled = true;
                    fixture.detectChanges();
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    testing_1.expect(el.nativeElement.hasAttribute('tabindex')).toBe(false);
                    tabindexController.isDisabled = false;
                    fixture.detectChanges();
                    el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    testing_1.expect(el.nativeElement.getAttribute('tabindex')).toEqual(String(tabindexController.checkboxTabindex));
                }).then(done).catch(done);
            });
            testing_1.describe('when the tabindex input is changed while disabled', function () {
                var tabindexController;
                var newTabindex;
                testing_1.beforeEach(function (done) {
                    newTabindex = 10;
                    builder.createAsync(CheckboxCustomTabindexController).then(function (f) {
                        fixture = f;
                        tabindexController = fixture.componentInstance;
                        tabindexController.isDisabled = true;
                        tabindexController.checkboxTabindex = newTabindex;
                        fixture.detectChanges();
                    }).then(done).catch(done);
                });
                testing_1.it('keeps the tabindex removed from the host', function () {
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    testing_1.expect(el.nativeElement.hasAttribute('tabindex')).toBe(false);
                });
                testing_1.it('uses the newly changed tabindex when re-enabled', function () {
                    tabindexController.isDisabled = false;
                    fixture.detectChanges();
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    testing_1.expect(el.nativeElement.getAttribute('tabindex')).toEqual(String(newTabindex));
                });
            });
        });
        testing_1.describe('when the checkbox is clicked', function () {
            var fixture;
            var controller;
            var el;
            function clickCheckbox() {
                return click(el, fixture);
            }
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    fixture.detectChanges();
                    el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                }).then(done).catch(done);
            });
            testing_1.it('toggles the checked value', function () {
                clickCheckbox();
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-checked');
                clickCheckbox();
                testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-checked');
            });
            testing_1.describe('when the checkbox is disabled', function () {
                testing_1.beforeEach(function () {
                    controller.isDisabled = true;
                    fixture.detectChanges();
                });
                testing_1.it('stops the click event from propagating', function () {
                    var evt = clickCheckbox();
                    testing_1.expect(evt.stopPropagation).toHaveBeenCalled();
                });
                testing_1.it('does not alter the checked value', function () {
                    clickCheckbox();
                    testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-checked');
                });
            });
        });
        testing_1.describe('when the checkbox is focused', function () {
            var fixture;
            var controller;
            var el;
            function dispatchUIEventOnEl(evtName) {
                var evt;
                if (BROWSER_SUPPORTS_EVENT_CONSTRUCTORS) {
                    evt = new Event(evtName);
                }
                else {
                    evt = document.createEvent('Event');
                    evt.initEvent(evtName, true, true);
                }
                el.nativeElement.dispatchEvent(evt);
                fixture.detectChanges();
            }
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    fixture.detectChanges();
                    el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                }).then(done).catch(done);
            });
            testing_1.it('blocks spacebar keydown events from performing their default behavior', function () {
                dispatchUIEventOnEl('focus');
                var evt = keydown(el, ' ', fixture);
                testing_1.expect(evt.preventDefault).toHaveBeenCalled();
            });
            testing_1.it('does not block other keyboard events from performing their default behavior', function () {
                dispatchUIEventOnEl('focus');
                var evt = keydown(el, 'Tab', fixture);
                testing_1.expect(evt.preventDefault).not.toHaveBeenCalled();
            });
        });
        testing_1.describe('when a spacebar press occurs on the checkbox', function () {
            var fixture;
            var controller;
            var el;
            function spacePress() {
                return keyup(el, ' ', fixture);
            }
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    fixture.detectChanges();
                    el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                }).then(done).catch(done);
            });
            testing_1.it('toggles the checked value', function () {
                spacePress();
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-checked');
                spacePress();
                testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-checked');
            });
            testing_1.describe('when the checkbox is disabled', function () {
                testing_1.beforeEach(function () {
                    controller.isDisabled = true;
                    fixture.detectChanges();
                });
                testing_1.it('stops the click event from propagating', function () {
                    var evt = spacePress();
                    testing_1.expect(evt.stopPropagation).toHaveBeenCalled();
                });
                testing_1.it('does not alter the checked value', function () {
                    spacePress();
                    testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-checked');
                });
            });
        });
        testing_1.describe('usage as a form control', function () {
            var fixture;
            var controller;
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxFormcontrolController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    fixture.detectChanges();
                }).then(done).catch(done);
            });
            // NOTE(traviskaufman): This test is not that elegant, but I have not found a better way
            // to test through ngModel as of now.
            // See: https://github.com/angular/angular/issues/7409
            testing_1.it('supports ngModel/ngControl', function (done) {
                var el;
                var invalidMsg;
                testing_1.fakeAsync(function () {
                    el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    invalidMsg = fixture.debugElement.query(browser_1.By.css('#invalid-msg'));
                    fixture.detectChanges();
                    testing_1.tick();
                    testing_1.expect(el.nativeElement.className).toContain('ng-untouched');
                    testing_1.expect(el.nativeElement.className).toContain('ng-pristine');
                    testing_1.expect(invalidMsg.nativeElement.hidden).toBe(true);
                    controller.model.isChecked = true;
                    fixture.detectChanges();
                    testing_1.tick();
                    fixture.detectChanges();
                    testing_1.expect(el.nativeElement.className).toContain('md-checkbox-checked');
                    testing_1.expect(el.nativeElement.className).toContain('ng-dirty');
                    testing_1.expect(el.nativeElement.className).toContain('ng-valid');
                    var blur;
                    if (BROWSER_SUPPORTS_EVENT_CONSTRUCTORS) {
                        blur = new Event('blur');
                    }
                    else {
                        blur = document.createEvent('UIEvent');
                        blur.initUIEvent('blur', true, true, window, 0);
                    }
                    el.nativeElement.dispatchEvent(blur);
                    fixture.detectChanges();
                    testing_1.tick();
                    testing_1.expect(el.nativeElement.className).toContain('ng-touched');
                })();
                var onceChanged = controller.model.waitForChange();
                click(el, fixture);
                onceChanged.then(function () {
                    testing_1.expect(controller.model.isChecked).toBe(false);
                }).then(done).catch(done);
            });
        });
        testing_1.describe('applying transition classes', function () {
            var fixture;
            var controller;
            testing_1.beforeEach(function (done) {
                builder.createAsync(CheckboxController).then(function (f) {
                    fixture = f;
                    controller = fixture.componentInstance;
                    fixture.detectChanges();
                }).then(done).catch(done);
            });
            testing_1.it('applies transition classes when going from unchecked <-> checked', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                controller.isChecked = true;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-unchecked-checked');
                controller.isChecked = false;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-anim-unchecked-checked');
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-checked-unchecked');
            });
            testing_1.it('applies transition classes when going from unchecked <-> indeterminate', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                controller.isIndeterminate = true;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-unchecked-indeterminate');
                controller.isIndeterminate = false;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-anim-unchecked-indeterminate');
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-indeterminate-unchecked');
            });
            testing_1.it('applies a transition class when going from checked -> indeterminate', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                controller.isChecked = true;
                fixture.detectChanges();
                controller.isIndeterminate = true;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-anim-unchecked-checked');
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-checked-indeterminate');
            });
            testing_1.it('applies a transition class when going from indeterminate -> checked', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                controller.isIndeterminate = true;
                fixture.detectChanges();
                controller.isChecked = true;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).not.toContain('md-checkbox-anim-unchecked-indeterminate');
                testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-indeterminate-checked');
            });
            testing_1.it('does not apply any transition classes when there is nothing to transition', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                controller.isChecked = controller.isChecked;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).not.toMatch(/^md\-checkbox\-anim/g);
                controller.isIndeterminate = controller.isIndeterminate;
                fixture.detectChanges();
                testing_1.expect(el.nativeElement.className).not.toMatch(/^md\-checkbox\-anim/g);
            });
            testing_1.it('does not apply any transition classes when the component is initialized', function () {
                var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                testing_1.expect(el.nativeElement.className).not.toMatch(/^md\-checkbox\-anim/g);
            });
            testing_1.describe('when interacted with from the initial state', function () {
                testing_1.beforeEach(function (done) {
                    builder.createAsync(CheckboxBarebonesController).then(function (f) {
                        fixture = f;
                        controller = fixture.componentInstance;
                        fixture.detectChanges();
                    }).then(done).catch(done.fail);
                });
                testing_1.it('applies a transition class when checked', function () {
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    click(el, fixture);
                    testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-unchecked-checked');
                });
                testing_1.it('applies a transition class when made indeterminate', function () {
                    var el = fixture.debugElement.query(browser_1.By.css('.md-checkbox'));
                    controller.isIndeterminate = true;
                    fixture.detectChanges();
                    testing_1.expect(el.nativeElement.className).toContain('md-checkbox-anim-unchecked-indeterminate');
                });
            });
        });
    });
}
exports.main = main;
function click(el, fixture) {
    var clickEvent;
    if (BROWSER_SUPPORTS_EVENT_CONSTRUCTORS) {
        clickEvent = new Event('click');
    }
    else {
        clickEvent = document.createEvent('UIEvent');
        clickEvent.initUIEvent('click', true, true, window, 1);
    }
    spyOn(clickEvent, 'stopPropagation').and.callThrough();
    el.nativeElement.dispatchEvent(clickEvent);
    fixture.detectChanges();
    return clickEvent;
}
// TODO(traviskaufman): Reinvestigate implementation of this method once tests in Dart begin to run.
function keyEvent(name, el, key, fixture) {
    var kbdEvent;
    if (BROWSER_SUPPORTS_EVENT_CONSTRUCTORS) {
        kbdEvent = new KeyboardEvent(name);
    }
    else {
        kbdEvent = document.createEvent('Event');
        kbdEvent.initEvent(name, true, true);
    }
    // Hack DOM Level 3 Events "key" prop into keyboard event.
    Object.defineProperty(kbdEvent, 'key', {
        value: key,
        enumerable: false,
        writable: false,
        configurable: true
    });
    spyOn(kbdEvent, 'preventDefault').and.callThrough();
    spyOn(kbdEvent, 'stopPropagation').and.callThrough();
    el.nativeElement.dispatchEvent(kbdEvent);
    fixture.detectChanges();
    return kbdEvent;
}
function keydown(el, key, fixture) {
    return keyEvent('keydown', el, key, fixture);
}
function keyup(el, key, fixture) {
    return keyEvent('keyup', el, key, fixture);
}
var CheckboxController = (function () {
    function CheckboxController() {
        this.isChecked = false;
        this.isIndeterminate = false;
        this.isDisabled = false;
        this.eventProxy = new core_1.EventEmitter();
    }
    CheckboxController = __decorate([
        core_1.Component({
            selector: 'checkbox-controller',
            template: "\n    <md-checkbox [checked]=\"isChecked\"\n                 [indeterminate]=\"isIndeterminate\"\n                 [disabled]=\"isDisabled\"\n                 (change)=\"eventProxy.emit($event)\">\n      <em>my</em> checkbox\n    </md-checkbox>\n  ",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxController);
    return CheckboxController;
}());
var CheckboxMultiController = (function () {
    function CheckboxMultiController() {
    }
    CheckboxMultiController = __decorate([
        core_1.Component({
            selector: 'checkbox-multi-controller',
            template: "\n    <md-checkbox></md-checkbox>\n    <md-checkbox></md-checkbox>\n  ",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxMultiController);
    return CheckboxMultiController;
}());
var CheckboxCustomIdController = (function () {
    function CheckboxCustomIdController() {
        this.checkboxId = 'my-checkbox';
    }
    CheckboxCustomIdController = __decorate([
        core_1.Component({
            selector: 'checkbox-custom-id-controller',
            template: "\n    <md-checkbox [id]=\"checkboxId\"></md-checkbox>\n  ",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxCustomIdController);
    return CheckboxCustomIdController;
}());
var CheckboxCustomTabindexController = (function () {
    function CheckboxCustomTabindexController() {
        this.checkboxTabindex = 5;
        this.isDisabled = false;
    }
    CheckboxCustomTabindexController = __decorate([
        core_1.Component({
            selector: 'checkbox-custom-tabindex-controller',
            template: "\n    <md-checkbox [tabindex]=\"checkboxTabindex\" [disabled]=\"isDisabled\"></md-checkbox>\n  ",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxCustomTabindexController);
    return CheckboxCustomTabindexController;
}());
var CheckboxCustomArialabelController = (function () {
    function CheckboxCustomArialabelController() {
        this.checkboxLabel = 'My awesome checkbox';
    }
    CheckboxCustomArialabelController = __decorate([
        core_1.Component({
            selector: 'checkbox-custom-arialabel-controller',
            template: "\n    <md-checkbox [aria-label]=\"checkboxLabel\"></md-checkbox>\n  ",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxCustomArialabelController);
    return CheckboxCustomArialabelController;
}());
var FormcontrolModel = (function () {
    function FormcontrolModel() {
        this._isChecked = false;
        this._changeEmitter = new core_1.EventEmitter();
    }
    Object.defineProperty(FormcontrolModel.prototype, "isChecked", {
        get: function () {
            return this._isChecked;
        },
        set: function (isChecked) {
            var shouldEmitChange = this._isChecked !== isChecked;
            this._isChecked = isChecked;
            if (shouldEmitChange) {
                this._changeEmitter.emit(this._isChecked);
            }
        },
        enumerable: true,
        configurable: true
    });
    FormcontrolModel.prototype.waitForChange = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var subscription;
            var subscriber = function (isChecked) {
                subscription.unsubscribe();
                resolve(isChecked);
            };
            subscription = _this._changeEmitter.subscribe(subscriber, reject);
        });
    };
    return FormcontrolModel;
}());
var CheckboxFormcontrolController = (function () {
    function CheckboxFormcontrolController() {
        this.model = new FormcontrolModel();
    }
    CheckboxFormcontrolController = __decorate([
        core_1.Component({
            selector: 'checkbox-formcontrol-controller',
            template: "\n    <form>\n      <md-checkbox [(ngModel)]=\"model.isChecked\"\n                   ngControl=\"cb\" #cb=\"ngForm\">\n      </md-checkbox>\n      <p id=\"invalid-msg\" [hidden]=\"cb.valid || cb.pristine\">INVALID!</p>\n    </form>\n  ",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxFormcontrolController);
    return CheckboxFormcontrolController;
}());
var CheckboxEndAlignedController = (function () {
    function CheckboxEndAlignedController() {
    }
    CheckboxEndAlignedController = __decorate([
        core_1.Component({
            selector: 'checkbox-end-aligned-controller',
            template: "<md-checkbox [align]=\"'end'\"></md-checkbox>",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxEndAlignedController);
    return CheckboxEndAlignedController;
}());
var CheckboxBarebonesController = (function () {
    function CheckboxBarebonesController() {
        this.isIndeterminate = false;
    }
    CheckboxBarebonesController = __decorate([
        core_1.Component({
            selector: 'checkbox-barebones-controller',
            template: "<md-checkbox [indeterminate]=\"isIndeterminate\"></md-checkbox>",
            directives: [checkbox_1.MdCheckbox]
        }), 
        __metadata('design:paramtypes', [])
    ], CheckboxBarebonesController);
    return CheckboxBarebonesController;
}());
//# sourceMappingURL=checkbox.spec.js.map